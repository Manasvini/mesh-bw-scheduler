// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package netmon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetMonitorClient is the client API for NetMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetMonitorClient interface {
	// Sends a greeting
	GetNetInfo(ctx context.Context, in *NetInfoRequest, opts ...grpc.CallOption) (*NetInfoReply, error)
}

type netMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewNetMonitorClient(cc grpc.ClientConnInterface) NetMonitorClient {
	return &netMonitorClient{cc}
}

func (c *netMonitorClient) GetNetInfo(ctx context.Context, in *NetInfoRequest, opts ...grpc.CallOption) (*NetInfoReply, error) {
	out := new(NetInfoReply)
	err := c.cc.Invoke(ctx, "/netmon.NetMonitor/GetNetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetMonitorServer is the server API for NetMonitor service.
// All implementations must embed UnimplementedNetMonitorServer
// for forward compatibility
type NetMonitorServer interface {
	// Sends a greeting
	GetNetInfo(context.Context, *NetInfoRequest) (*NetInfoReply, error)
	mustEmbedUnimplementedNetMonitorServer()
}

// UnimplementedNetMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedNetMonitorServer struct {
}

func (UnimplementedNetMonitorServer) GetNetInfo(context.Context, *NetInfoRequest) (*NetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetInfo not implemented")
}
func (UnimplementedNetMonitorServer) mustEmbedUnimplementedNetMonitorServer() {}

// UnsafeNetMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetMonitorServer will
// result in compilation errors.
type UnsafeNetMonitorServer interface {
	mustEmbedUnimplementedNetMonitorServer()
}

func RegisterNetMonitorServer(s grpc.ServiceRegistrar, srv NetMonitorServer) {
	s.RegisterService(&NetMonitor_ServiceDesc, srv)
}

func _NetMonitor_GetNetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetMonitorServer).GetNetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netmon.NetMonitor/GetNetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetMonitorServer).GetNetInfo(ctx, req.(*NetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetMonitor_ServiceDesc is the grpc.ServiceDesc for NetMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "netmon.NetMonitor",
	HandlerType: (*NetMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetInfo",
			Handler:    _NetMonitor_GetNetInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net_helper.proto",
}
